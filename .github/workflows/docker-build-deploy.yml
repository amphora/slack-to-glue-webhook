name: Build and Deploy Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest requests-mock

    - name: Setup config file for testing
      run: |
        cp config.yml-example config.yml
        echo "Using example config for tests"

    - name: Run basic tests
      run: |
        python -c "import app; print('App module loads successfully')"
        python -c "import yaml; yaml.safe_load(open('config.yml')); print('Config file is valid YAML')"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Test Docker image
      run: |
        # Create a test config file
        cat > test-config.yml << 'EOF'
        services:
          test-service:
            target: "grp_test123"
            webhook_url: "https://example.com/webhook"
            description: "Test service for CI"
        global:
          timeout_seconds: 30
          log_level: "INFO"
        EOF

        # Run container with mounted test config
        docker run --rm -d --name test-container \
          -p 8080:8080 \
          -v $(pwd)/test-config.yml:/app/config.yml \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

        # Wait for container to start
        sleep 10

        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1

        # Cleanup
        docker stop test-container
        rm test-config.yml